// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250117043610_LearningHistoryAndGame")]
    partial class LearningHistoryAndGame
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.PivotEntities.KnowledgeTopicKnowledge", b =>
                {
                    b.Property<Guid>("KnowledgeTopicId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("KnowledgeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("KnowledgeTopicId", "KnowledgeId");

                    b.HasIndex("KnowledgeId");

                    b.ToTable("KnowledgeTopicKnowledges");
                });

            modelBuilder.Entity("Domain.Entities.PivotEntities.KnowledgeTypeKnowledge", b =>
                {
                    b.Property<Guid>("KnowledgeTypeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("KnowledgeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("KnowledgeTypeId", "KnowledgeId");

                    b.HasIndex("KnowledgeId");

                    b.ToTable("KnowledgeTypeKnowledges");
                });

            modelBuilder.Entity("Domain.Entities.PivotEntities.LearningListKnowledge", b =>
                {
                    b.Property<Guid>("LearningListId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("KnowledgeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("LearningListId", "KnowledgeId");

                    b.HasIndex("KnowledgeId");

                    b.ToTable("LearningListKnowledges");
                });

            modelBuilder.Entity("Domain.Entities.PivotEntities.SubjectKnowledge", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("KnowledgeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("SubjectId", "KnowledgeId");

                    b.HasIndex("KnowledgeId");

                    b.ToTable("SubjectKnowledges");
                });

            modelBuilder.Entity("Domain.Entities.PivotEntities.TrackSubject", b =>
                {
                    b.Property<Guid>("TrackId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("TrackId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("TrackSubjects");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Authentication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConfirmationCode")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<DateTime?>("ConfirmationCodeExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Authentications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8eb711fc-d597-49d8-bd4a-58024d7f74ed"),
                            CreatedAt = new DateTime(2025, 1, 17, 4, 36, 10, 112, DateTimeKind.Utc).AddTicks(8820),
                            HashedPassword = "XohImNooBHFR0OVvjcYpJ3NgPQ1qq73WKhHvch0VQtg=",
                            IsActivated = true,
                            IsEmailConfirmed = true,
                            UserId = new Guid("91b9597c-acee-4733-88ff-716cde963b37")
                        },
                        new
                        {
                            Id = new Guid("a2466d92-c874-4d5f-804a-168bd25849c6"),
                            CreatedAt = new DateTime(2025, 1, 17, 4, 36, 10, 112, DateTimeKind.Utc).AddTicks(8940),
                            HashedPassword = "XohImNooBHFR0OVvjcYpJ3NgPQ1qq73WKhHvch0VQtg=",
                            IsActivated = true,
                            IsEmailConfirmed = true,
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.GameOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GameKnowledgeSubscriptionId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("GameKnowledgeSubscriptionId");

                    b.ToTable("GameOptions");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Knowledge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Knowledges", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.KnowledgeTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("KnowledgeTopics", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.KnowledgeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("KnowledgeTypes", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.LearningHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsMemorized")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("LearningId")
                        .HasColumnType("char(36)");

                    b.Property<int>("LearningLevel")
                        .HasColumnType("int");

                    b.Property<Guid?>("PlayedGameId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LearningId");

                    b.HasIndex("PlayedGameId");

                    b.ToTable("LearningHistories");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.LearningList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("LearnerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("LearnerId");

                    b.ToTable("LearningLists");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("KnowledgeId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KnowledgeId");

                    b.HasIndex("ParentId");

                    b.ToTable("Materials", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.PublicationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("KnowledgeId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KnowledgeId")
                        .IsUnique();

                    b.ToTable("PublicationRequests", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Subjects", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Tracks", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("91b9597c-acee-4733-88ff-716cde963b37"),
                            CreatedAt = new DateTime(2025, 1, 17, 4, 36, 10, 112, DateTimeKind.Utc).AddTicks(8480),
                            Email = "testuser@example.com",
                            Role = 1,
                            UserName = "testuser"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 1, 17, 4, 36, 10, 112, DateTimeKind.Utc).AddTicks(8550),
                            Email = "admin@admin.admin",
                            Role = 1,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdPivotEntities.GameKnowledgeSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GameId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("KnowledgeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("KnowledgeId");

                    b.ToTable("GameKnowledgeSubscriptions");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdPivotEntities.Learning", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("KnowledgeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("NextReviewDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("KnowledgeId");

                    b.HasIndex("UserId");

                    b.ToTable("Learnings");
                });

            modelBuilder.Entity("Domain.Entities.PivotEntities.KnowledgeTopicKnowledge", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.Knowledge", "Knowledge")
                        .WithMany("KnowledgeTopicKnowledges")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.KnowledgeTopic", "KnowledgeTopic")
                        .WithMany("KnowledgeTopicKnowledges")
                        .HasForeignKey("KnowledgeTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Knowledge");

                    b.Navigation("KnowledgeTopic");
                });

            modelBuilder.Entity("Domain.Entities.PivotEntities.KnowledgeTypeKnowledge", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.Knowledge", "Knowledge")
                        .WithMany("KnowledgeTypeKnowledges")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.KnowledgeType", "KnowledgeType")
                        .WithMany("KnowledgeTypeKnowledges")
                        .HasForeignKey("KnowledgeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Knowledge");

                    b.Navigation("KnowledgeType");
                });

            modelBuilder.Entity("Domain.Entities.PivotEntities.LearningListKnowledge", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.Knowledge", "Knowledge")
                        .WithMany("LearningListKnowledges")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.LearningList", "LearningList")
                        .WithMany("LearningListKnowledges")
                        .HasForeignKey("LearningListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Knowledge");

                    b.Navigation("LearningList");
                });

            modelBuilder.Entity("Domain.Entities.PivotEntities.SubjectKnowledge", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.Knowledge", "Knowledge")
                        .WithMany("SubjectKnowledges")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.Subject", "Subject")
                        .WithMany("SubjectKnowledges")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Knowledge");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Entities.PivotEntities.TrackSubject", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.Subject", "Subject")
                        .WithMany("TrackSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.Track", "Track")
                        .WithMany("TrackSubjects")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Authentication", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.User", "User")
                        .WithOne("Authentication")
                        .HasForeignKey("Domain.Entities.SingleIdEntities.Authentication", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.GameOption", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdPivotEntities.GameKnowledgeSubscription", "GameKnowledgeSubscription")
                        .WithMany("GameOptions")
                        .HasForeignKey("GameKnowledgeSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameKnowledgeSubscription");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Knowledge", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.KnowledgeTopic", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.KnowledgeTopic", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.KnowledgeType", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.KnowledgeType", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.LearningHistory", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdPivotEntities.Learning", "Learning")
                        .WithMany("LearningHistories")
                        .HasForeignKey("LearningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.Game", "PlayedGame")
                        .WithMany()
                        .HasForeignKey("PlayedGameId");

                    b.Navigation("Learning");

                    b.Navigation("PlayedGame");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.LearningList", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.User", "User")
                        .WithMany("LearningLists")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Material", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.Knowledge", "Knowledge")
                        .WithMany("Materials")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.Material", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Knowledge");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.PublicationRequest", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.Knowledge", "Knowledge")
                        .WithOne("PublicationRequest")
                        .HasForeignKey("Domain.Entities.SingleIdEntities.PublicationRequest", "KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Knowledge");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdPivotEntities.GameKnowledgeSubscription", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.Game", "Game")
                        .WithMany("GameKnowledgeSubscriptions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.Knowledge", "Knowledge")
                        .WithMany("GameKnowledgeSubscriptions")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Knowledge");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdPivotEntities.Learning", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.Knowledge", "Knowledge")
                        .WithMany("Learnings")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.User", "User")
                        .WithMany("Learnings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Knowledge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Game", b =>
                {
                    b.Navigation("GameKnowledgeSubscriptions");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Knowledge", b =>
                {
                    b.Navigation("GameKnowledgeSubscriptions");

                    b.Navigation("KnowledgeTopicKnowledges");

                    b.Navigation("KnowledgeTypeKnowledges");

                    b.Navigation("LearningListKnowledges");

                    b.Navigation("Learnings");

                    b.Navigation("Materials");

                    b.Navigation("PublicationRequest");

                    b.Navigation("SubjectKnowledges");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.KnowledgeTopic", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("KnowledgeTopicKnowledges");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.KnowledgeType", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("KnowledgeTypeKnowledges");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.LearningList", b =>
                {
                    b.Navigation("LearningListKnowledges");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Material", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Subject", b =>
                {
                    b.Navigation("SubjectKnowledges");

                    b.Navigation("TrackSubjects");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Track", b =>
                {
                    b.Navigation("TrackSubjects");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.User", b =>
                {
                    b.Navigation("Authentication");

                    b.Navigation("LearningLists");

                    b.Navigation("Learnings");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdPivotEntities.GameKnowledgeSubscription", b =>
                {
                    b.Navigation("GameOptions");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdPivotEntities.Learning", b =>
                {
                    b.Navigation("LearningHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
