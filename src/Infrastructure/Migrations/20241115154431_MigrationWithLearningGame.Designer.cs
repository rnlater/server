// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241115154431_MigrationWithLearningGame")]
    partial class MigrationWithLearningGame
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.PivotEntities.KnowledgeTopicKnowledge", b =>
                {
                    b.Property<Guid>("KnowledgeTopicId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("KnowledgeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("KnowledgeTopicId", "KnowledgeId");

                    b.HasIndex("KnowledgeId");

                    b.ToTable("KnowledgeTopicKnowledges");

                    b.HasData(
                        new
                        {
                            KnowledgeTopicId = new Guid("c6a8a743-a025-4eee-ba7e-2571f023f62a"),
                            KnowledgeId = new Guid("5b9fe9f4-8553-4f91-a806-8e19a2dae9b6"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5330)
                        },
                        new
                        {
                            KnowledgeTopicId = new Guid("e8a35c41-da54-4148-81ec-a18da0797111"),
                            KnowledgeId = new Guid("6b7012bd-6663-428a-b187-73b15ac9e8cc"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5330)
                        });
                });

            modelBuilder.Entity("Domain.Entities.PivotEntities.KnowledgeTypeKnowledge", b =>
                {
                    b.Property<Guid>("KnowledgeTypeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("KnowledgeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("KnowledgeTypeId", "KnowledgeId");

                    b.HasIndex("KnowledgeId");

                    b.ToTable("KnowledgeTypeKnowledges");

                    b.HasData(
                        new
                        {
                            KnowledgeTypeId = new Guid("f3d76cab-223d-49c3-b51b-e1ff2a57314c"),
                            KnowledgeId = new Guid("5b9fe9f4-8553-4f91-a806-8e19a2dae9b6"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5300)
                        },
                        new
                        {
                            KnowledgeTypeId = new Guid("a4440e11-3bc7-425d-ac21-264b1906346a"),
                            KnowledgeId = new Guid("6b7012bd-6663-428a-b187-73b15ac9e8cc"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5300)
                        });
                });

            modelBuilder.Entity("Domain.Entities.PivotEntities.SubjectKnowledge", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("KnowledgeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("SubjectId", "KnowledgeId");

                    b.HasIndex("KnowledgeId");

                    b.ToTable("SubjectKnowledges");

                    b.HasData(
                        new
                        {
                            SubjectId = new Guid("e2076035-11cb-473e-8c0c-9c68bc711da7"),
                            KnowledgeId = new Guid("5b9fe9f4-8553-4f91-a806-8e19a2dae9b6"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5280)
                        },
                        new
                        {
                            SubjectId = new Guid("e9e4cdbe-ae71-4def-9f21-3dc8bb5035ae"),
                            KnowledgeId = new Guid("6b7012bd-6663-428a-b187-73b15ac9e8cc"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5280)
                        });
                });

            modelBuilder.Entity("Domain.Entities.PivotEntities.TrackSubject", b =>
                {
                    b.Property<Guid>("TrackId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("TrackId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("TrackSubjects");

                    b.HasData(
                        new
                        {
                            TrackId = new Guid("d69d0960-ddf0-4f34-a636-bd8feeccc0b2"),
                            SubjectId = new Guid("e2076035-11cb-473e-8c0c-9c68bc711da7"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5250)
                        },
                        new
                        {
                            TrackId = new Guid("1842dda3-63e2-419b-891c-844306444001"),
                            SubjectId = new Guid("e9e4cdbe-ae71-4def-9f21-3dc8bb5035ae"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5250)
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Authentication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConfirmationCode")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<DateTime?>("ConfirmationCodeExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Authentications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bf9fa3fd-e85f-4466-933b-326ff5ab53e7"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(4560),
                            HashedPassword = "XohImNooBHFR0OVvjcYpJ3NgPQ1qq73WKhHvch0VQtg=",
                            IsActivated = true,
                            IsEmailConfirmed = true,
                            UserId = new Guid("a9b57b10-671f-49bd-86a9-ac07ba03fc58")
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6035bee5-cd3b-4608-a6a0-78eccfbb9ec9"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5360),
                            Description = "Description 1",
                            ImageUrl = "image1.jpg",
                            Name = "Game 1"
                        },
                        new
                        {
                            Id = new Guid("c87995de-de81-4d48-ba8e-d574f55cc44b"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5370),
                            Description = "Description 2",
                            ImageUrl = "image2.jpg",
                            Name = "Game 2"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.GameOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GameKnowledgeSubscriptionId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("GameKnowledgeSubscriptionId");

                    b.ToTable("GameOptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7b8b9ebd-a93b-4193-b3c2-ce1ecb6b7870"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5430),
                            GameKnowledgeSubscriptionId = new Guid("922c99ea-f068-4309-a359-ed3726321bef"),
                            Group = 1,
                            Type = 0,
                            Value = "What is Value 1?"
                        },
                        new
                        {
                            Id = new Guid("3278d6d8-f3cf-4f6d-b059-847d2b4a32b4"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5440),
                            GameKnowledgeSubscriptionId = new Guid("922c99ea-f068-4309-a359-ed3726321bef"),
                            Group = 1,
                            IsCorrect = true,
                            Type = 1,
                            Value = "Value 1"
                        },
                        new
                        {
                            Id = new Guid("49632a6c-4151-4766-8b8f-9193bfb9dc69"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5440),
                            GameKnowledgeSubscriptionId = new Guid("922c99ea-f068-4309-a359-ed3726321bef"),
                            Group = 1,
                            Type = 1,
                            Value = "Wrong Value"
                        },
                        new
                        {
                            Id = new Guid("eecae7e3-d51c-43c0-9256-425d20dad231"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5450),
                            GameKnowledgeSubscriptionId = new Guid("724e0ace-3973-49b2-962f-8dedb00ebd79"),
                            Group = 2,
                            Type = 0,
                            Value = "What is Value 2?"
                        },
                        new
                        {
                            Id = new Guid("39034003-e9d9-4f23-946e-441eb92886d7"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5560),
                            GameKnowledgeSubscriptionId = new Guid("724e0ace-3973-49b2-962f-8dedb00ebd79"),
                            Group = 2,
                            IsCorrect = true,
                            Type = 1,
                            Value = "Value 2"
                        },
                        new
                        {
                            Id = new Guid("9a8bab58-1e73-44c6-ad67-0bbdd77dea4c"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5560),
                            GameKnowledgeSubscriptionId = new Guid("724e0ace-3973-49b2-962f-8dedb00ebd79"),
                            Group = 2,
                            Type = 1,
                            Value = "Value 2"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Knowledge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Knowledges", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b9fe9f4-8553-4f91-a806-8e19a2dae9b6"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5170),
                            CreatorId = new Guid("a9b57b10-671f-49bd-86a9-ac07ba03fc58"),
                            Level = 0,
                            Title = "Introduction to Algebra",
                            Visibility = 0
                        },
                        new
                        {
                            Id = new Guid("6b7012bd-6663-428a-b187-73b15ac9e8cc"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5180),
                            CreatorId = new Guid("a9b57b10-671f-49bd-86a9-ac07ba03fc58"),
                            Level = 2,
                            Title = "Introduction to Physics",
                            Visibility = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.KnowledgeTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("KnowledgeTopics", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6a8a743-a025-4eee-ba7e-2571f023f62a"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5050),
                            Order = 1,
                            Title = "Algebra"
                        },
                        new
                        {
                            Id = new Guid("e8a35c41-da54-4148-81ec-a18da0797111"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5130),
                            Order = 2,
                            Title = "Physics"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.KnowledgeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("KnowledgeTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f3d76cab-223d-49c3-b51b-e1ff2a57314c"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5010),
                            Name = "Theory"
                        },
                        new
                        {
                            Id = new Guid("a4440e11-3bc7-425d-ac21-264b1906346a"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5010),
                            Name = "Practical"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.LearningHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsMemorized")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("LearningId")
                        .HasColumnType("char(36)");

                    b.Property<int>("LearningLevel")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayedGameId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LearningId");

                    b.HasIndex("PlayedGameId");

                    b.ToTable("LearningHistories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce793616-33aa-4b0b-9de9-447caef86a4c"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5640),
                            IsMemorized = true,
                            LearningId = new Guid("120e4c04-fe9b-484a-b03a-189d83612813"),
                            LearningLevel = 0,
                            PlayedGameId = new Guid("6035bee5-cd3b-4608-a6a0-78eccfbb9ec9"),
                            Score = 100
                        },
                        new
                        {
                            Id = new Guid("a2e9c292-2b38-460f-99e5-62d27a48ebdd"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5640),
                            IsMemorized = false,
                            LearningId = new Guid("dff36469-2a2c-4c7f-a462-4871e550b83d"),
                            LearningLevel = 1,
                            PlayedGameId = new Guid("c87995de-de81-4d48-ba8e-d574f55cc44b"),
                            Score = 80
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("KnowledgeId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KnowledgeId");

                    b.HasIndex("ParentId");

                    b.ToTable("Materials", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fda84451-1fca-429b-baea-401c798dea4a"),
                            Content = "Video content about Algebra.",
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5210),
                            KnowledgeId = new Guid("5b9fe9f4-8553-4f91-a806-8e19a2dae9b6"),
                            Order = 1,
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("d6da04a3-ead1-4083-9f03-395019d452c0"),
                            Content = "Article about Physics.",
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5220),
                            KnowledgeId = new Guid("6b7012bd-6663-428a-b187-73b15ac9e8cc"),
                            Order = 2,
                            Type = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Subjects", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e2076035-11cb-473e-8c0c-9c68bc711da7"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(4920),
                            Description = "Study of numbers, shapes, and patterns.",
                            Name = "Mathematics",
                            Photo = "test.png"
                        },
                        new
                        {
                            Id = new Guid("e9e4cdbe-ae71-4def-9f21-3dc8bb5035ae"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(4930),
                            Description = "Study of the physical and natural world.",
                            Name = "Science",
                            Photo = "test.png"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Tracks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d69d0960-ddf0-4f34-a636-bd8feeccc0b2"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(4960),
                            Description = "A track focused on Mathematics.",
                            Name = "Mathematics Track"
                        },
                        new
                        {
                            Id = new Guid("1842dda3-63e2-419b-891c-844306444001"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(4970),
                            Description = "A track focused on Science.",
                            Name = "Science Track"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a9b57b10-671f-49bd-86a9-ac07ba03fc58"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(4330),
                            Email = "testuser@example.com",
                            Role = 1,
                            UserName = "testuser"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdPivotEntities.GameKnowledgeSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GameId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("KnowledgeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("KnowledgeId1")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("KnowledgeId");

                    b.HasIndex("KnowledgeId1")
                        .IsUnique();

                    b.ToTable("GameKnowledgeSubscriptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("922c99ea-f068-4309-a359-ed3726321bef"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5400),
                            GameId = new Guid("6035bee5-cd3b-4608-a6a0-78eccfbb9ec9"),
                            KnowledgeId = new Guid("5b9fe9f4-8553-4f91-a806-8e19a2dae9b6")
                        },
                        new
                        {
                            Id = new Guid("724e0ace-3973-49b2-962f-8dedb00ebd79"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5400),
                            GameId = new Guid("c87995de-de81-4d48-ba8e-d574f55cc44b"),
                            KnowledgeId = new Guid("6b7012bd-6663-428a-b187-73b15ac9e8cc")
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdPivotEntities.Learning", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("KnowledgeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("NextReviewDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("KnowledgeId");

                    b.HasIndex("UserId");

                    b.ToTable("Learnings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("120e4c04-fe9b-484a-b03a-189d83612813"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5600),
                            KnowledgeId = new Guid("5b9fe9f4-8553-4f91-a806-8e19a2dae9b6"),
                            NextReviewDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("a9b57b10-671f-49bd-86a9-ac07ba03fc58")
                        },
                        new
                        {
                            Id = new Guid("dff36469-2a2c-4c7f-a462-4871e550b83d"),
                            CreatedAt = new DateTime(2024, 11, 15, 15, 44, 30, 583, DateTimeKind.Utc).AddTicks(5610),
                            KnowledgeId = new Guid("6b7012bd-6663-428a-b187-73b15ac9e8cc"),
                            NextReviewDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("a9b57b10-671f-49bd-86a9-ac07ba03fc58")
                        });
                });

            modelBuilder.Entity("Domain.Entities.PivotEntities.KnowledgeTopicKnowledge", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.Knowledge", "Knowledge")
                        .WithMany("KnowledgeTopicKnowledges")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.KnowledgeTopic", "KnowledgeTopic")
                        .WithMany("KnowledgeTopicKnowledges")
                        .HasForeignKey("KnowledgeTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Knowledge");

                    b.Navigation("KnowledgeTopic");
                });

            modelBuilder.Entity("Domain.Entities.PivotEntities.KnowledgeTypeKnowledge", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.Knowledge", "Knowledge")
                        .WithMany("KnowledgeTypeKnowledges")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.KnowledgeType", "KnowledgeType")
                        .WithMany("KnowledgeTypeKnowledges")
                        .HasForeignKey("KnowledgeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Knowledge");

                    b.Navigation("KnowledgeType");
                });

            modelBuilder.Entity("Domain.Entities.PivotEntities.SubjectKnowledge", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.Knowledge", "Knowledge")
                        .WithMany("SubjectKnowledges")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.Subject", "Subject")
                        .WithMany("SubjectKnowledges")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Knowledge");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Entities.PivotEntities.TrackSubject", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.Subject", "Subject")
                        .WithMany("TrackSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.Track", "Track")
                        .WithMany("TrackSubjects")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Authentication", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.User", "User")
                        .WithOne("Authentication")
                        .HasForeignKey("Domain.Entities.SingleIdEntities.Authentication", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.GameOption", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdPivotEntities.GameKnowledgeSubscription", "GameKnowledgeSubscription")
                        .WithMany("GameOptions")
                        .HasForeignKey("GameKnowledgeSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameKnowledgeSubscription");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Knowledge", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.KnowledgeTopic", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.KnowledgeTopic", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.KnowledgeType", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.KnowledgeType", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.LearningHistory", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdPivotEntities.Learning", "Learning")
                        .WithMany("LearningHistories")
                        .HasForeignKey("LearningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.Game", "PlayedGame")
                        .WithMany()
                        .HasForeignKey("PlayedGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Learning");

                    b.Navigation("PlayedGame");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Material", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.Knowledge", "Knowledge")
                        .WithMany("Materials")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.Material", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Knowledge");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdPivotEntities.GameKnowledgeSubscription", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.Game", "Game")
                        .WithMany("GameKnowledgeSubscriptions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.Knowledge", "Knowledge")
                        .WithMany("GameKnowledgeSubscriptions")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.Knowledge", null)
                        .WithOne("GameToReview")
                        .HasForeignKey("Domain.Entities.SingleIdPivotEntities.GameKnowledgeSubscription", "KnowledgeId1");

                    b.Navigation("Game");

                    b.Navigation("Knowledge");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdPivotEntities.Learning", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.Knowledge", "Knowledge")
                        .WithMany("Learnings")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.User", "User")
                        .WithMany("Learnings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Knowledge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Game", b =>
                {
                    b.Navigation("GameKnowledgeSubscriptions");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Knowledge", b =>
                {
                    b.Navigation("GameKnowledgeSubscriptions");

                    b.Navigation("GameToReview");

                    b.Navigation("KnowledgeTopicKnowledges");

                    b.Navigation("KnowledgeTypeKnowledges");

                    b.Navigation("Learnings");

                    b.Navigation("Materials");

                    b.Navigation("SubjectKnowledges");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.KnowledgeTopic", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("KnowledgeTopicKnowledges");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.KnowledgeType", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("KnowledgeTypeKnowledges");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Material", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Subject", b =>
                {
                    b.Navigation("SubjectKnowledges");

                    b.Navigation("TrackSubjects");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Track", b =>
                {
                    b.Navigation("TrackSubjects");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.User", b =>
                {
                    b.Navigation("Authentication");

                    b.Navigation("Learnings");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdPivotEntities.GameKnowledgeSubscription", b =>
                {
                    b.Navigation("GameOptions");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdPivotEntities.Learning", b =>
                {
                    b.Navigation("LearningHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
