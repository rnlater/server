// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241114064927_MigrationWithLearningGame")]
    partial class MigrationWithLearningGame
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.PivotEntities.KnowledgeTopicKnowledge", b =>
                {
                    b.Property<Guid>("KnowledgeTopicId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("KnowledgeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("KnowledgeTopicId", "KnowledgeId");

                    b.HasIndex("KnowledgeId");

                    b.ToTable("KnowledgeTopicKnowledges");

                    b.HasData(
                        new
                        {
                            KnowledgeTopicId = new Guid("5e7aa25a-3b50-449a-a9da-443d8174e1aa"),
                            KnowledgeId = new Guid("2ec6e41b-faba-4ed1-bc29-f7f8ea5340d6"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(5160)
                        },
                        new
                        {
                            KnowledgeTopicId = new Guid("9c4c2c9c-4c2e-433f-8cb5-2ba74dcdf7b7"),
                            KnowledgeId = new Guid("60f522b1-69a5-46c2-9487-098d79e60741"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(5170)
                        });
                });

            modelBuilder.Entity("Domain.Entities.PivotEntities.KnowledgeTypeKnowledge", b =>
                {
                    b.Property<Guid>("KnowledgeTypeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("KnowledgeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("KnowledgeTypeId", "KnowledgeId");

                    b.HasIndex("KnowledgeId");

                    b.ToTable("KnowledgeTypeKnowledges");

                    b.HasData(
                        new
                        {
                            KnowledgeTypeId = new Guid("1ef91520-f995-4871-8d61-11386ae17d5f"),
                            KnowledgeId = new Guid("2ec6e41b-faba-4ed1-bc29-f7f8ea5340d6"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(5120)
                        },
                        new
                        {
                            KnowledgeTypeId = new Guid("ae87764f-e6c7-44d5-ad32-2fb91fc8ce32"),
                            KnowledgeId = new Guid("60f522b1-69a5-46c2-9487-098d79e60741"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(5130)
                        });
                });

            modelBuilder.Entity("Domain.Entities.PivotEntities.SubjectKnowledge", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("KnowledgeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("SubjectId", "KnowledgeId");

                    b.HasIndex("KnowledgeId");

                    b.ToTable("SubjectKnowledges");

                    b.HasData(
                        new
                        {
                            SubjectId = new Guid("ec8f31c6-e6b9-41ee-b5a8-1eee3970898e"),
                            KnowledgeId = new Guid("2ec6e41b-faba-4ed1-bc29-f7f8ea5340d6"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(5000)
                        },
                        new
                        {
                            SubjectId = new Guid("3a0dcf72-d5c6-4550-bfea-e15f392e243e"),
                            KnowledgeId = new Guid("60f522b1-69a5-46c2-9487-098d79e60741"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(5010)
                        });
                });

            modelBuilder.Entity("Domain.Entities.PivotEntities.TrackSubject", b =>
                {
                    b.Property<Guid>("TrackId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("TrackId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("TrackSubjects");

                    b.HasData(
                        new
                        {
                            TrackId = new Guid("4b8864c1-8755-4d73-8b7b-00cdce57a74a"),
                            SubjectId = new Guid("ec8f31c6-e6b9-41ee-b5a8-1eee3970898e"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(4850)
                        },
                        new
                        {
                            TrackId = new Guid("a2c7d934-b843-49b8-9d0f-3daa10c98697"),
                            SubjectId = new Guid("3a0dcf72-d5c6-4550-bfea-e15f392e243e"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(4850)
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Authentication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConfirmationCode")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<DateTime?>("ConfirmationCodeExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Authentications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("73634806-5e73-411c-afcc-361bd3fd972e"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(4010),
                            HashedPassword = "XohImNooBHFR0OVvjcYpJ3NgPQ1qq73WKhHvch0VQtg=",
                            IsActivated = true,
                            IsEmailConfirmed = true,
                            UserId = new Guid("70bfb17c-d2cc-48f0-a071-4aa35c746d56")
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a14ada4-c9a8-47ce-bd74-9e889e773804"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(5200),
                            Description = "Description 1",
                            ImageUrl = "image1.jpg",
                            Name = "Game 1"
                        },
                        new
                        {
                            Id = new Guid("595dcfd0-d177-4ff4-ab53-fbe378d32468"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(5240),
                            Description = "Description 2",
                            ImageUrl = "image2.jpg",
                            Name = "Game 2"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.GameOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GameKnowledgeSubscriptionId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("GameKnowledgeSubscriptionId");

                    b.ToTable("GameOptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("410a3ef3-91d3-4790-94c7-2c34599cc36b"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(5330),
                            GameKnowledgeSubscriptionId = new Guid("1dcf2b12-8b2c-4d8e-b992-261fdf07e5c9"),
                            Group = 1,
                            Type = 0,
                            Value = "What is Value 1?"
                        },
                        new
                        {
                            Id = new Guid("00b4f54f-ea0b-4a42-8b35-562ab18fc60f"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(5330),
                            GameKnowledgeSubscriptionId = new Guid("1dcf2b12-8b2c-4d8e-b992-261fdf07e5c9"),
                            Group = 1,
                            IsCorrect = true,
                            Type = 1,
                            Value = "Value 1"
                        },
                        new
                        {
                            Id = new Guid("38465583-45fb-4e13-bc31-261fbee57e75"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(5340),
                            GameKnowledgeSubscriptionId = new Guid("1dcf2b12-8b2c-4d8e-b992-261fdf07e5c9"),
                            Group = 1,
                            Type = 1,
                            Value = "Wrong Value"
                        },
                        new
                        {
                            Id = new Guid("77ab178b-132d-4b58-b46f-8fada61cd3c0"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(5350),
                            GameKnowledgeSubscriptionId = new Guid("b7811e7a-6df6-4d7d-a81f-f873168f0f9b"),
                            Group = 2,
                            Type = 0,
                            Value = "What is Value 2?"
                        },
                        new
                        {
                            Id = new Guid("bfa7c1d4-b42b-4cce-9729-8b1b7f315bb6"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(5350),
                            GameKnowledgeSubscriptionId = new Guid("b7811e7a-6df6-4d7d-a81f-f873168f0f9b"),
                            Group = 2,
                            IsCorrect = true,
                            Type = 1,
                            Value = "Value 2"
                        },
                        new
                        {
                            Id = new Guid("802cd8b9-4e45-47b1-a462-6f21d7cb69ee"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(5360),
                            GameKnowledgeSubscriptionId = new Guid("b7811e7a-6df6-4d7d-a81f-f873168f0f9b"),
                            Group = 2,
                            Type = 1,
                            Value = "Value 2"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Knowledge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Knowledges", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ec6e41b-faba-4ed1-bc29-f7f8ea5340d6"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(4730),
                            CreatorId = new Guid("70bfb17c-d2cc-48f0-a071-4aa35c746d56"),
                            Level = 0,
                            Title = "Introduction to Algebra",
                            Visibility = 0
                        },
                        new
                        {
                            Id = new Guid("60f522b1-69a5-46c2-9487-098d79e60741"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(4740),
                            CreatorId = new Guid("70bfb17c-d2cc-48f0-a071-4aa35c746d56"),
                            Level = 2,
                            Title = "Introduction to Physics",
                            Visibility = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.KnowledgeTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("KnowledgeTopics", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e7aa25a-3b50-449a-a9da-443d8174e1aa"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(4680),
                            Order = 1,
                            Title = "Algebra"
                        },
                        new
                        {
                            Id = new Guid("9c4c2c9c-4c2e-433f-8cb5-2ba74dcdf7b7"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(4690),
                            Order = 2,
                            Title = "Physics"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.KnowledgeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("KnowledgeTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1ef91520-f995-4871-8d61-11386ae17d5f"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(4640),
                            Name = "Theory"
                        },
                        new
                        {
                            Id = new Guid("ae87764f-e6c7-44d5-ad32-2fb91fc8ce32"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(4650),
                            Name = "Practical"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.LearningHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsMemorized")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("LearningId")
                        .HasColumnType("char(36)");

                    b.Property<int>("LearningLevel")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayedGameId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LearningId");

                    b.HasIndex("PlayedGameId");

                    b.ToTable("LearningHistories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8983958-c302-4907-b6ba-4cd3d6428b1d"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(5450),
                            IsMemorized = true,
                            LearningId = new Guid("3a95146b-6106-4fe6-998f-98a59791dd5f"),
                            LearningLevel = 0,
                            PlayedGameId = new Guid("0a14ada4-c9a8-47ce-bd74-9e889e773804"),
                            Score = 100
                        },
                        new
                        {
                            Id = new Guid("1737db4c-21f0-44d3-bdbc-9b2c4541a310"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(5540),
                            IsMemorized = false,
                            LearningId = new Guid("735f8cd5-0bde-4275-b0d5-3733362eca09"),
                            LearningLevel = 1,
                            PlayedGameId = new Guid("595dcfd0-d177-4ff4-ab53-fbe378d32468"),
                            Score = 80
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("KnowledgeId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KnowledgeId");

                    b.HasIndex("ParentId");

                    b.ToTable("Materials", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b5ce233f-83a6-4424-8301-81f852ae0b69"),
                            Content = "Video content about Algebra.",
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(4800),
                            KnowledgeId = new Guid("2ec6e41b-faba-4ed1-bc29-f7f8ea5340d6"),
                            Order = 1,
                            Type = 4
                        },
                        new
                        {
                            Id = new Guid("d6d7f7c7-a66f-4281-942d-a1c8793449f0"),
                            Content = "Article about Physics.",
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(4810),
                            KnowledgeId = new Guid("60f522b1-69a5-46c2-9487-098d79e60741"),
                            Order = 2,
                            Type = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Subjects", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec8f31c6-e6b9-41ee-b5a8-1eee3970898e"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(4440),
                            Description = "Study of numbers, shapes, and patterns.",
                            Name = "Mathematics",
                            Photo = "test.png"
                        },
                        new
                        {
                            Id = new Guid("3a0dcf72-d5c6-4550-bfea-e15f392e243e"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(4450),
                            Description = "Study of the physical and natural world.",
                            Name = "Science",
                            Photo = "test.png"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Tracks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b8864c1-8755-4d73-8b7b-00cdce57a74a"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(4490),
                            Description = "A track focused on Mathematics.",
                            Name = "Mathematics Track"
                        },
                        new
                        {
                            Id = new Guid("a2c7d934-b843-49b8-9d0f-3daa10c98697"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(4590),
                            Description = "A track focused on Science.",
                            Name = "Science Track"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("70bfb17c-d2cc-48f0-a071-4aa35c746d56"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(3710),
                            Email = "testuser@example.com",
                            Role = 1,
                            UserName = "testuser"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdPivotEntities.GameKnowledgeSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GameId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("KnowledgeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("KnowledgeId");

                    b.ToTable("GameKnowledgeSubscriptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1dcf2b12-8b2c-4d8e-b992-261fdf07e5c9"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(5280),
                            GameId = new Guid("0a14ada4-c9a8-47ce-bd74-9e889e773804"),
                            KnowledgeId = new Guid("2ec6e41b-faba-4ed1-bc29-f7f8ea5340d6")
                        },
                        new
                        {
                            Id = new Guid("b7811e7a-6df6-4d7d-a81f-f873168f0f9b"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(5290),
                            GameId = new Guid("595dcfd0-d177-4ff4-ab53-fbe378d32468"),
                            KnowledgeId = new Guid("60f522b1-69a5-46c2-9487-098d79e60741")
                        });
                });

            modelBuilder.Entity("Domain.Entities.SingleIdPivotEntities.Learning", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("KnowledgeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("NextReviewDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("KnowledgeId");

                    b.HasIndex("UserId");

                    b.ToTable("Learnings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a95146b-6106-4fe6-998f-98a59791dd5f"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(5400),
                            KnowledgeId = new Guid("2ec6e41b-faba-4ed1-bc29-f7f8ea5340d6"),
                            NextReviewDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("70bfb17c-d2cc-48f0-a071-4aa35c746d56")
                        },
                        new
                        {
                            Id = new Guid("735f8cd5-0bde-4275-b0d5-3733362eca09"),
                            CreatedAt = new DateTime(2024, 11, 14, 6, 49, 26, 941, DateTimeKind.Utc).AddTicks(5410),
                            KnowledgeId = new Guid("60f522b1-69a5-46c2-9487-098d79e60741"),
                            NextReviewDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("70bfb17c-d2cc-48f0-a071-4aa35c746d56")
                        });
                });

            modelBuilder.Entity("Domain.Entities.PivotEntities.KnowledgeTopicKnowledge", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.Knowledge", "Knowledge")
                        .WithMany("KnowledgeTopicKnowledges")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.KnowledgeTopic", "KnowledgeTopic")
                        .WithMany("KnowledgeTopicKnowledges")
                        .HasForeignKey("KnowledgeTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Knowledge");

                    b.Navigation("KnowledgeTopic");
                });

            modelBuilder.Entity("Domain.Entities.PivotEntities.KnowledgeTypeKnowledge", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.Knowledge", "Knowledge")
                        .WithMany("KnowledgeTypeKnowledges")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.KnowledgeType", "KnowledgeType")
                        .WithMany("KnowledgeTypeKnowledges")
                        .HasForeignKey("KnowledgeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Knowledge");

                    b.Navigation("KnowledgeType");
                });

            modelBuilder.Entity("Domain.Entities.PivotEntities.SubjectKnowledge", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.Knowledge", "Knowledge")
                        .WithMany("SubjectKnowledges")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.Subject", "Subject")
                        .WithMany("SubjectKnowledges")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Knowledge");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Entities.PivotEntities.TrackSubject", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.Subject", "Subject")
                        .WithMany("TrackSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.Track", "Track")
                        .WithMany("TrackSubjects")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Authentication", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.User", "User")
                        .WithOne("Authentication")
                        .HasForeignKey("Domain.Entities.SingleIdEntities.Authentication", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.GameOption", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdPivotEntities.GameKnowledgeSubscription", "GameKnowledgeSubscription")
                        .WithMany("GameOptions")
                        .HasForeignKey("GameKnowledgeSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameKnowledgeSubscription");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Knowledge", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.KnowledgeTopic", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.KnowledgeTopic", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.KnowledgeType", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.KnowledgeType", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.LearningHistory", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdPivotEntities.Learning", "Learning")
                        .WithMany("LearningHistories")
                        .HasForeignKey("LearningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.Game", "PlayedGame")
                        .WithMany()
                        .HasForeignKey("PlayedGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Learning");

                    b.Navigation("PlayedGame");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Material", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.Knowledge", "Knowledge")
                        .WithMany("Materials")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.Material", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Knowledge");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdPivotEntities.GameKnowledgeSubscription", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.Game", "Game")
                        .WithMany("GameKnowledgeSubscriptions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.Knowledge", "Knowledge")
                        .WithMany("GameKnowledgeSubscriptions")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Knowledge");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdPivotEntities.Learning", b =>
                {
                    b.HasOne("Domain.Entities.SingleIdEntities.Knowledge", "Knowledge")
                        .WithMany("Learnings")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SingleIdEntities.User", "User")
                        .WithMany("Learnings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Knowledge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Game", b =>
                {
                    b.Navigation("GameKnowledgeSubscriptions");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Knowledge", b =>
                {
                    b.Navigation("GameKnowledgeSubscriptions");

                    b.Navigation("KnowledgeTopicKnowledges");

                    b.Navigation("KnowledgeTypeKnowledges");

                    b.Navigation("Learnings");

                    b.Navigation("Materials");

                    b.Navigation("SubjectKnowledges");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.KnowledgeTopic", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("KnowledgeTopicKnowledges");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.KnowledgeType", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("KnowledgeTypeKnowledges");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Material", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Subject", b =>
                {
                    b.Navigation("SubjectKnowledges");

                    b.Navigation("TrackSubjects");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.Track", b =>
                {
                    b.Navigation("TrackSubjects");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdEntities.User", b =>
                {
                    b.Navigation("Authentication");

                    b.Navigation("Learnings");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdPivotEntities.GameKnowledgeSubscription", b =>
                {
                    b.Navigation("GameOptions");
                });

            modelBuilder.Entity("Domain.Entities.SingleIdPivotEntities.Learning", b =>
                {
                    b.Navigation("LearningHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
